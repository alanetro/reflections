What happens when you initialize a repository? Why do you need to do it?

Git creates a .git folder with metadata to receive snapshots of the files
through git commit command. Git init initializes the repository.
I need to do it so I can have a repository and save snapshots of the files.


How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area is an intermediate area where you can add files to make logically separated commits even if you
made several non related changes you can make your commits reflect the logical changes using the staging area.
Sometime you can have files you don't want in the commit and sometime you want files to not be in the repository at all(private information, database pass, public ip, secret key for hashing passwords), the staging area makes it really easy to control what goes in the repository(what gets tracket).


How can you use the staging area to make sure you have one commit per logical change?

You can use the command "git diff --staged" to see if the changes are logically
related and if not you can remove from the staging area the files that are not
related and put them in the working directory to be commited later, and only
commit the changes that are logically related. You can use the staging area to compare
it to the contents of the last commit in the repository and to the contents in the working directory.


What are some situations when branches would be helpful in keeping your history organized? How would branches help?

When you want to add some feature, refactor the code, fix some bug and the master branch needs to be usable by other program/person.
Branches let you keep these changes away from the main branch(master) and
you can still show the working version in a easier way in a commit with a name (master, you dont need to remember or save the commit id of a working version).
When your feature/fix/refactoring is ready you can merge these two branches and make the changes available to the main branch.
People can work in different branches one group working in maintain the main branch fixing bugs and the other group working in creating a feature without having to worry if the main branch can't be deployed/utilized/shown.


How do the diagrams help you visualize the branch structure?

They help me visualize the reachable commits and where do my branchs/history diverge so when I want to merge them I know what one branch has and the other dont.
